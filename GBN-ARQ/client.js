// این قسمت کد مربوط به کلاینت می باشد
//می توان این قسمت را مستقل از سرور بر روی یک سرور یا یک دستگاه دیگر اجرا کرد و قابلیت کلاینت بودن را دارد

console.log("///////////////////////\n Client - GBN ARQ\n///////////////////////\n\n")

// برای اتصال از سوکت استفاده میکنیم به همین دلیل پکیج ساکت آی او را به یک متفیر نسبت می دهیم
var io = require('socket.io-client');
var socket = io.connect('http://localhost:8000');// از آدرس لوکال هاست و پورت ۸۰۰۰ برای اتصال استفاده می کنیم

async function send(frame){      // در اینجا یک تابع می سازیم که فرستادن را شبیه سازی می کند
    await sleep(10* frame.length) // ابتدا برای قرار دادن هر بیت بر روی مدیا ۱۰ نانو ثانیه وقت میگیرد
    output(frame) // سپس چاپ می کند که این فریم فرستاده شده است
    socket.emit('media', frame) // برای فرستادن در سوکت از تابع امیت استفاده می کنیم و در کانالی به اسم مدیا میفرستیم
}

// در اینجا سوکت به کانال مدیا گوش میدهد در صورتی که فریمی دریافت کند تابع زیر اجرا می شود
socket.on('media', async (frame)=>{
    await sleep(2000) // در اینجا مدت زمان انتشار شبیه سازی شده که ۲ ثانیه می باشد
    received(frame) // سپس فریمی که گرفته ایم را به این تابع می دهیم تا عملیات لازم انجام شود
})

socket.on('finished',()=>{ // در اینجا به کانال اتمام گوش می دهد و در صورتی که اتصالی دریافت کند پایان می یابد
    console.log('\n *** Message Received: ' + message) // کل پیام دریافت شده را نمایش می دهد
})

function sleep(ms) { // ساخت تابع اسلیپ با استفاده از پرامیس و یک تایم اوت صورت می گیرد
    return new Promise((resolve) => {
      setTimeout(resolve, ms);
    });
}

function output(frame, message, seq){ // برای نمایش خروجی می باشد اهمیتی ندارد :D
    if(typeof seq !== "undefined") {
        console.log("-" + getTime() + " | RECV | SEQ: " + seq + " | Frame: " + frame + " | " + "Message: " + message)
    }else{
        if(frame[0] == 0){
            console.log("-" + getTime() + " | SENT | " + "REJ: " + frame)
        }else{
            console.log("-" + getTime() + " | SENT | " + "RR: " + frame)
        }
    }
}

function getTime(){ // زمان را با فرمت مناسبی بر می گرداند
    return new Date().toISOString().slice(11,23)
}

/////////////////////////////////////////////

let message = '' // در اینجا پیامی که دریافت می شود ذخیره می کنیم
let expected = 0 // شماره فریمی است که منتظر ان هستیم

function received(frame){ // در صورتی که سروو دریافت کند این تابع اجرا می شود
    [index, str] = decode_frame(frame) // فریم را دیکود می کنیم و اندیس و خود رشته را در می آوریم
    output(frame, str, index) // نمایش می دهیم آنچه که دریافت شده است
    if (index == expected){ // اگر اندیس یا شماره دنباله ای که منتظر آن بودیم به دست ما برسد
        message += str // رشته ی دیکود شده را به ادامه پیام اضافه می کنیم
        expected += 1 // مقدار انتظار را افزایش می دهیم
        ack = '1' // چون به درستی دریافت شده مقدار را یک می گذاریم
        seq = index + 1 // و مقدار اندیسی که همراه اک میفرستیم برابر اندیس دریافت شده به اضافه یک می باشد
    }else if (index > expected){ // اگر شماره ای به دست ما برسد که بزرگتر از مقدار مورد انتظار باشد
        ack = '0' // ریجکت می شود
        seq = expected // شماره ی مورد انتظار برگشت داده می شود
    }else{ // اگر شماره کوچکتر باشد کاری انجام نمی دهیم فقط مانند مورد اول آمادگی برای دریافت بعدی را می دهیم
        ack = '1'
        seq = expected
    }
    seq_bin = (seq).toString(2) // شماره دنباله ای که میخواهیم بفرستیم را به باینری تبدیل می کنیم
    send_frame = ack + ('00000000' + seq_bin).slice(-8)    // مقدار اک را در ابتدا اضافه می کنیم و شماره را یک بایت می کنیم
    // if(Math.random() < 0.8)
        send(send_frame) // آن را می فرستیم
    
}


function decode_frame(frame){ // این تابع برای دیکود کردن فریم می باشد
    str = "" // رشته ای که از فریم دریافت می کنیم
    index_bin = frame.substring(0,8) // اولین بایت فریم مربوط به اندیس است
    index = parseInt(index_bin, 2) // آن را به عدد صحیح تبدیل می کنیم
    for(let i=8; i<frame.length; i+=8){ // برای هر بایت باقی مانده در فریم 
        char_bin = frame.substring(i,i+8) // آن بایت را به کد کاراکتر تبدیل
        char_code = parseInt(char_bin, 2) 
        if(char_code != 0){ // و سپس اگر صفر نبود به خود کاراکتر تبدیل می کنیم و به رشته اضافه می کنیم
            str += String.fromCharCode(char_code)
        }
    }
    return [index, str] // رشته و اندیس را بر می گردانیم
}